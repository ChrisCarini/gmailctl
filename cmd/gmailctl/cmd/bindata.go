// Code generated for package cmd by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../gmailctl.libsonnet
// ../../../default-config.jsonnet
package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _GmailctlLibsonnet = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x4f\x6f\xe3\xb6\x13\xbd\xeb\x53\x3c\xec\xc5\x12\xa2\x9f\xbd\xb9\x3a\xc8\x0f\xd8\x6e\x51\xf4\x50\x6c\x7b\x08\xd0\x83\xa0\x03\x2d\x8d\xac\x29\x68\xd2\x25\x47\x71\x8c\x20\xdf\xbd\xe0\x1f\xc9\x4a\x76\x7b\xe9\xc5\x90\x39\x33\xef\x91\xef\xcd\x90\xbb\x1d\x8e\x27\xc5\xba\x13\x0d\x2f\xca\xf4\xca\xf5\xd0\x7c\x70\xca\x5d\x8b\xdd\xae\xd8\xed\xf0\x34\xb2\x9f\x97\xd0\x59\x23\x8a\x8d\xc7\x24\xac\x59\x98\x3c\x06\xeb\xd0\xd9\xd3\xc9\x1a\x0c\xac\x85\x1c\xec\x99\x9c\x12\xb6\xc6\x6f\x8b\xe2\xb5\x00\x76\x3b\x74\xa3\x62\xf3\x4b\x8c\x7b\xb0\x87\xc2\x30\x99\x2e\x24\x41\x46\x25\x35\x8e\xfc\x4c\x06\x0a\x9a\xbd\xc0\x0e\x70\x93\x26\x5f\xa7\x62\x47\x32\x39\x13\x8a\x0c\x5d\x52\xc6\x65\x24\x47\x90\x91\x52\x22\x94\xa3\xc4\x41\x3d\xc4\x1e\x47\x12\x72\xb9\xfa\x32\x72\x37\xe2\x44\xca\xf8\xc8\x15\xaa\xae\xe8\x94\xc1\x81\xc0\x46\xc8\x9d\x1d\x09\xf5\x50\x81\x21\x82\xa4\x42\x3b\xe0\x13\x0f\x20\xed\xe7\xdf\x4f\xdb\x14\x79\x0a\xbc\xe4\x27\x2d\xe1\x2c\x07\xe5\xb9\x53\x5a\x5f\x3f\x6e\x3f\xef\x92\x54\x37\x66\x6d\x52\x39\x7b\x9c\x6c\xcf\x03\x53\x8f\xc3\x15\xaa\xef\xd9\x1c\xa1\x0c\xbe\x7c\xfb\x19\x17\x96\x31\x1e\xcc\xd0\x31\xaa\x18\xe0\x94\xd6\x61\x2d\x95\x9f\x1d\x3d\xb3\x9d\x7c\xc6\xf4\x61\x53\x6b\x7d\xcb\xc1\x57\xfb\x7d\x01\xc4\xec\xe4\xd4\x35\x1d\x7d\x56\x39\x6c\x0f\x2c\x8b\xb2\x2c\x3e\xf1\x51\x9f\x51\xb7\xb1\x5e\xdb\x4e\xe9\x1c\x29\x5d\x85\x47\xbc\xc2\x58\xd9\xc3\x6d\xb3\xd9\x6f\x0f\x33\x91\xa3\x6e\x72\x9e\x9f\x29\x53\x59\xf2\x10\x67\xa7\xe3\x18\xb7\x4f\x9a\x4e\x64\xc4\xc7\xe3\x38\xb7\x82\x57\xd3\x4b\xa9\x9c\xab\xc1\xf5\xbc\x89\x1a\x6e\x32\x86\xcd\xb1\xc2\x63\xcc\x04\x78\x00\xe3\xff\x8f\xf0\xd2\x6f\x35\x99\xa3\x8c\xa1\xa8\x0a\xb2\x98\x9c\x82\xb9\x2a\xff\x27\xed\x69\x09\xed\x76\x59\xd5\x4b\x3e\xbd\x9f\x15\xb7\xc3\x7e\x9d\xf5\xbf\x7f\x53\xff\x26\x7c\x74\xf7\xfb\x9a\x6e\x72\x8e\x8c\xc4\xf0\x12\x9d\x25\xbc\xb8\xa0\xde\xb2\x8c\xac\xf3\xfe\xdd\x1a\xa0\x4c\xbf\x5f\xac\xb8\x43\xa3\x9c\x6b\xb8\xcd\x6a\xb7\xf5\x2a\xf7\x6d\xfd\x47\xc5\x59\xf2\x7b\xe4\xfc\xfc\xff\x96\x92\x7d\x8a\xb9\x8b\xde\xb8\xc3\x7d\xbd\x66\xcb\x4e\x27\x90\xaa\x5d\x6c\x48\xb1\x8b\x6b\x2b\x88\x62\xed\xc5\x71\x27\x0f\x45\x91\x8d\x59\x79\x32\xf8\x0a\x8f\x8f\xf8\x1c\x7d\x41\xd3\x16\xb3\x11\x91\x76\xf0\x75\x60\x9c\x79\x06\xdf\x7c\x8e\x34\x4d\xfc\x6a\xab\xba\x48\x2d\xde\xb3\xa3\x4e\xf4\xf5\xc9\xe2\xa4\xa4\x1b\xc9\xc3\x1a\x7d\x05\x85\xcb\x6a\x3d\xfc\xd4\xf1\x99\x83\xe6\xec\xc1\x26\xae\x6d\x9e\x7e\xdf\x24\x94\x81\x49\xf7\x75\x68\xd8\x14\xf8\xfa\x75\x03\xeb\xb0\xf9\x29\x7e\x18\x8a\x93\x73\xa3\x2a\x17\xb4\x6a\x3f\xdb\x12\xed\x68\xb2\x74\xaf\x10\xbb\x5f\x71\x2e\x0e\xe4\xa1\x78\x45\xd7\xbd\x8b\xcf\x19\xd1\xb7\xb7\x78\xb8\xd4\x0e\xf4\x22\x64\xfa\x3f\x59\xc6\x3f\x54\x68\x19\x5f\x6a\x75\x20\xed\xe7\x76\x5f\x67\x95\xe7\xdb\x10\xa4\xf5\xce\x9e\xce\x1e\x69\x14\xfc\x59\xb3\x94\xe7\x1a\x9b\xdd\xa6\x7a\x78\x97\x16\x04\x0f\x2d\x59\xc3\xd1\xe9\x86\xf1\xd1\xb1\x14\x9c\x2d\x5b\xf5\x54\x13\x8a\xdb\x65\xe1\xdd\x34\x61\x41\xc7\x5d\xa0\xc6\x5d\x20\x69\x3e\xb7\x91\xac\xb9\xdf\xb7\x55\xe8\x99\x88\xf0\x50\xfc\x88\x36\x1e\x22\x12\xdf\xe7\x5e\x39\xb7\xab\xb9\x4d\xf8\x21\x27\x82\xa6\xaf\x00\x9b\xd0\x02\xd0\xa0\x95\x08\x99\x2f\xce\xa9\xab\x2f\x9b\xac\x96\xae\xe2\x93\xa4\x43\x3b\x24\x51\x6f\x6d\x15\x06\xf3\xb7\xb8\x76\x7b\x53\xf2\x6c\xa7\x54\x18\xa2\x3e\xdd\xca\xf3\xdb\xb2\x5d\x4c\xbb\x55\x97\xe1\x73\x56\x34\x1f\xcb\x1e\xfe\xa2\x4e\x7e\x55\x29\xb8\x0c\x20\x36\x09\x79\xf3\xee\xa6\xfa\xde\xff\x75\xd1\x36\x37\x43\xf1\x41\xf6\xa6\xfd\xaf\x07\x49\xf7\x7e\xbc\xb6\xd2\x13\x96\x60\xbe\x59\xc9\xb7\xb5\xb1\xb0\x32\x92\xc3\xd9\x85\xe7\x3b\xbc\xec\x75\x5e\x91\x51\xa5\xc1\x32\xea\x44\x75\x7c\x69\x95\x88\xea\x46\xea\x13\x8a\xd8\x35\x71\xc9\x5b\xda\xa6\xeb\xd0\x6a\xeb\xaa\xc0\x17\x89\x57\xd2\x2d\xef\x53\x12\x36\x57\xa6\x86\x9e\x0c\xff\x5d\xc6\xce\xb6\x4e\xca\x1f\xf8\xbc\xb2\xe1\x25\x79\xfd\x12\xbc\x8e\xb8\x6d\x55\xe5\x06\x69\x5e\xe3\x7e\xf7\x78\xc1\xdb\x2d\x29\x37\x44\x5d\xbc\x15\xff\x04\x00\x00\xff\xff\x26\x10\xc5\x46\xfb\x08\x00\x00")

func GmailctlLibsonnetBytes() ([]byte, error) {
	return bindataRead(
		_GmailctlLibsonnet,
		"../../../gmailctl.libsonnet",
	)
}

func GmailctlLibsonnet() (*asset, error) {
	bytes, err := GmailctlLibsonnetBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../gmailctl.libsonnet", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DefaultConfigJsonnet = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x41\x6b\xe3\x48\x10\x85\xef\xfa\x15\x6f\xd9\x83\x2e\xc6\x62\xd9\x9b\x42\x20\x81\x18\x36\xb0\x8e\x43\xc6\x39\x0c\x43\x0e\x25\xb9\x64\x35\xd3\xea\x12\xd5\x25\x4f\x4c\xf0\x7f\x1f\x5a\xed\x24\x93\x90\x53\xbb\xba\x9f\xbf\x57\xef\xa9\xaa\x70\xb7\xd9\xae\x6a\x6c\x7b\x17\xe1\x22\x08\xd1\x0d\xa3\x67\xf0\x33\xa5\x73\x59\x54\x15\xee\x3d\x53\x64\x28\x77\xac\x30\x41\x6f\x36\xc6\xba\xaa\xf6\xce\xfa\xa9\x59\xb6\x32\x54\x43\xa3\x56\xed\x07\x72\xbe\x35\xff\x77\x2b\xa1\x73\xfb\x49\xc9\x9c\x04\x74\xa2\xd8\x49\x1b\x41\x8d\x4c\x96\x80\xd6\x33\xb2\x26\x3d\x0e\x64\x4b\xdc\x48\x28\x2d\x4d\x7b\xb6\xe4\xd1\xf6\x14\xf6\xfc\x87\xf2\x95\xd6\x70\x27\xca\x49\x42\xe3\xe8\x8f\x70\x99\x28\x38\xca\xa4\x90\x5f\x01\x2e\x34\xf2\xfc\x57\x91\xae\x6f\x87\x51\xd4\x66\x4a\x34\x0a\x3b\xd2\x1d\xbc\x6b\x94\xf4\x58\x78\x69\xc9\xa7\x09\x97\x70\x59\x57\xbe\x26\x58\x7a\xd7\x44\x09\x81\xad\xbc\x98\x41\xdf\x64\x60\x4c\x91\xbb\xc9\xe3\x40\xea\xa8\xf1\x1c\x21\x01\x26\x63\x7a\xdf\x6e\x6e\x36\x35\xee\x27\xcb\x6b\x70\xe2\xa0\x67\xe5\xb3\xcd\xc0\xb8\x44\xf9\x7d\xf3\xf8\xb0\x5c\xad\xaf\x6f\xff\xbf\x9a\x9d\x52\x75\xe5\xc5\x59\x62\xb2\x4e\xa2\x17\x98\xd4\x49\x7f\xba\x28\x66\xeb\x6d\xcf\xa0\xd6\x26\xf2\x1f\x9b\x28\x5e\x0a\xa0\xaa\xb0\x4e\xb9\x4c\xf4\x88\x9e\x69\xc7\x5a\x00\x07\xd6\xe8\x24\xd4\x28\x0f\xff\x90\x1f\x7b\xfa\xb7\x5c\x14\x00\x4d\xd6\x8b\xd6\x48\x7f\x04\x02\x0d\x5c\xe7\x9d\x70\x77\xbd\x5e\xe1\xbf\xd5\xc3\x6a\xd6\x21\xef\x9f\xb6\x48\xe3\x69\x51\x64\xa7\x1c\xf2\x31\xf2\x7b\xd7\x3a\xa5\x1e\xe6\xa0\xc8\x43\x8d\x1f\x33\x22\x9b\x00\x9d\xf3\xc6\x5a\xcf\xf1\x16\xe7\x3b\x6a\x53\x80\x58\xbf\x89\x80\x81\xf4\x67\xfe\x5a\x14\xac\x86\xe9\xf4\xa6\x3e\xe5\x1f\xe7\xe3\x33\xf7\x1d\xd1\xa9\x0c\x35\xca\x86\xf4\xea\x48\xbd\xc8\xdc\xee\x27\xc8\x97\xde\xa4\x6d\xef\x0e\xfc\xd1\x15\xf0\xd4\xb0\x4f\x79\xca\x4e\xa4\x7c\xfa\x6a\x9d\xa7\x45\x71\x2a\x7e\x07\x00\x00\xff\xff\x9f\xa5\x47\x2f\x45\x03\x00\x00")

func DefaultConfigJsonnetBytes() ([]byte, error) {
	return bindataRead(
		_DefaultConfigJsonnet,
		"../../../default-config.jsonnet",
	)
}

func DefaultConfigJsonnet() (*asset, error) {
	bytes, err := DefaultConfigJsonnetBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../default-config.jsonnet", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../gmailctl.libsonnet":     GmailctlLibsonnet,
	"../../../default-config.jsonnet": DefaultConfigJsonnet,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"..": &bintree{nil, map[string]*bintree{
				"default-config.jsonnet": &bintree{DefaultConfigJsonnet, map[string]*bintree{}},
				"gmailctl.libsonnet":     &bintree{GmailctlLibsonnet, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

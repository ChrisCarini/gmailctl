// Code generated for package cmd by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../gmailctl.libsonnet
// ../../../default-config.jsonnet
package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _GmailctlLibsonnet = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x94\x4d\x6f\xe3\x36\x10\x86\xef\xfa\x15\x2f\xf6\x92\x18\xab\x5a\xdb\xab\x83\x14\x68\xb7\xed\xb1\xbd\xe4\x66\xf8\xc0\x50\x23\x6b\x00\x8a\x34\x86\xa3\x78\x85\x20\xff\xbd\xe0\x87\x64\x67\x81\x5e\x0c\x6a\xbe\x5e\xce\x33\x1c\x77\x1d\xce\x93\x61\x67\xd5\x21\xaa\xf1\xbd\x91\x1e\x8e\x5f\xc5\xc8\xd2\x74\x5d\xd3\x75\x78\x19\x39\xc2\x06\xaf\x86\x7d\xc4\xac\xec\x58\x99\x22\x74\x34\x8a\xc8\xd3\xc5\xf1\xb0\xc0\x86\x69\x0a\x1e\x03\x3b\x25\x41\xb8\x90\x18\xe5\xe0\xe3\xbe\x49\x35\xec\x68\xd8\xff\x9d\x7d\x11\x1c\x61\x30\xcc\xde\xa6\x80\x5c\xa6\xc5\x99\xdf\xc8\xc3\xc0\x71\x54\x84\x01\x32\x3b\x8a\x6d\x4a\x15\xd2\x59\x7c\x4a\xf1\x74\x2d\xfe\xeb\x48\x42\xd0\x91\x4a\x18\x8c\x50\x51\xa0\x1e\x1a\xce\x23\x29\x49\xce\xbd\x8e\x6c\x47\x4c\x64\x7c\xbd\xae\x8e\xb4\xc0\x1a\x8f\x57\x02\x7b\x25\xb9\x08\x29\xf5\x30\xa9\x7e\x2e\x91\xd2\xc2\x80\x2f\x3c\x80\x5c\x5c\x7f\xbf\xec\x0b\x09\x82\x50\x9c\x9d\xa6\x1e\x5e\x4d\x64\x6b\x9c\x5b\x7e\xbe\x76\xbd\x1f\x19\x3b\x56\x1e\x29\x99\x23\xa6\xd0\xf3\xc0\xd4\xe3\x75\x81\xe9\x7b\xf6\x67\x18\x8f\xdf\xff\xf9\x13\x57\xd6\x31\x37\xe4\xe9\x9c\xb9\xa5\x62\xc6\xb9\x64\x4b\xc9\x17\xa1\x37\x0e\x73\xac\xf5\xe2\xbe\x71\xc1\x1a\xf7\x89\xeb\xe3\x10\x77\x78\x6e\x80\xae\xab\x53\x5a\x4a\xd3\x2b\xdb\x74\x39\xb0\x6e\x44\x59\x63\xd1\xa3\xbe\xd6\xdd\x37\x40\x29\x5c\xec\x8f\xb2\xc3\x33\xde\xe1\x83\x1e\x20\xfb\x3a\xdc\x8f\xa7\x22\x22\x64\x67\x89\xfc\x46\x55\x26\xa4\x47\x21\x61\x3e\x8f\xf9\xea\xe4\x68\x22\xaf\x31\xb7\x22\xb2\x95\x36\xf3\x8f\x47\x23\xd2\x82\xdb\x55\xbe\x85\xcc\xde\xb3\x3f\x97\x06\x00\x1e\xc0\xf8\xed\x19\x51\xfb\xbd\x23\x7f\xd6\x31\xa5\xec\x12\x0e\x9f\x03\xb0\x66\xe4\x2f\x72\x91\xaa\xb9\xeb\x2a\xc7\x6b\xed\x37\xae\x8c\xc3\x70\xb8\xc5\xfc\xf2\x7f\xb4\x6f\xa8\xf3\x2c\x7f\xce\xb0\xb3\x08\x79\xcd\xce\xea\x5b\x81\x5d\x25\xb1\xaa\x46\x54\xa2\x87\x3b\x0b\x60\x7c\x7f\xd8\x90\x7f\xc5\xd1\x88\x1c\xf9\x54\xb9\x9e\xda\x2d\xf2\xe3\x76\x34\x79\x4b\xe2\x01\x35\xb6\x7e\xaf\x01\x79\x16\x39\x6e\xa3\x8a\xaf\xf8\xb5\xbd\x57\xa9\xb3\x2c\x05\x76\xa7\x0d\x76\xf1\x5d\xe5\xb4\x83\x1a\x76\x51\x85\xad\x3e\x35\x4d\xc6\x7f\x47\x3e\xbf\xab\x67\x7c\xcb\xf4\x71\x3c\x35\x05\x78\x96\x1c\x62\x9b\xd4\x56\x8d\x21\x1e\xbf\x65\x89\x63\x3e\x9d\x76\x4f\x79\xfd\x7b\x16\xb2\xea\x96\x97\x80\xc9\xa8\x1d\x29\x22\x78\xb7\x80\xd2\x5f\xcf\xfd\x3a\x93\xe5\x0b\x27\xbe\x1c\xc1\x3e\xdb\x1e\x5e\xfe\x7d\x48\x35\x06\x26\xd7\xb7\xe9\x29\x16\xf3\xf7\xef\x0f\x08\x82\x87\x3f\xf2\xc1\xd3\xb6\x13\x37\xb1\xc7\xad\xde\xae\x8e\x26\x0f\xe0\x98\x91\xbd\x43\xc3\xe1\x4e\xb1\x32\xaf\x8f\xfd\x1d\xd6\x7e\xf2\x16\xff\xa9\x6d\x3e\x4a\x4b\x7f\xfd\xb8\x04\xc9\x9b\x53\xff\xc8\x62\x93\x04\xee\x17\xf2\xf0\xe9\x2b\xa5\xdf\xae\x76\xb8\x3b\xb7\xcd\x47\xf3\x5f\x00\x00\x00\xff\xff\x5f\xa6\x5a\xa3\x88\x05\x00\x00")

func GmailctlLibsonnetBytes() ([]byte, error) {
	return bindataRead(
		_GmailctlLibsonnet,
		"../../../gmailctl.libsonnet",
	)
}

func GmailctlLibsonnet() (*asset, error) {
	bytes, err := GmailctlLibsonnetBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../gmailctl.libsonnet", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DefaultConfigJsonnet = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x41\x6b\xe3\x48\x10\x85\xef\xfa\x15\x6f\xd9\x83\x2e\xc6\x62\xd9\x9b\x42\x20\x81\x18\x36\xb0\x8e\x43\xc6\x39\x0c\x43\x0e\x25\xb9\x64\x35\xd3\xea\x12\xd5\x25\x4f\x4c\xf0\x7f\x1f\x5a\xed\x24\x93\x90\x53\xbb\xba\x9f\xbf\x57\xef\xa9\xaa\x70\xb7\xd9\xae\x6a\x6c\x7b\x17\xe1\x22\x08\xd1\x0d\xa3\x67\xf0\x33\xa5\x73\x59\x54\x15\xee\x3d\x53\x64\x28\x77\xac\x30\x41\x6f\x36\xc6\xba\xaa\xf6\xce\xfa\xa9\x59\xb6\x32\x54\x43\xa3\x56\xed\x07\x72\xbe\x35\xff\x77\x2b\xa1\x73\xfb\x49\xc9\x9c\x04\x74\xa2\xd8\x49\x1b\x41\x8d\x4c\x96\x80\xd6\x33\xb2\x26\x3d\x0e\x64\x4b\xdc\x48\x28\x2d\x4d\x7b\xb6\xe4\xd1\xf6\x14\xf6\xfc\x87\xf2\x95\xd6\x70\x27\xca\x49\x42\xe3\xe8\x8f\x70\x99\x28\x38\xca\xa4\x90\x5f\x01\x2e\x34\xf2\xfc\x57\x91\xae\x6f\x87\x51\xd4\x66\x4a\x34\x0a\x3b\xd2\x1d\xbc\x6b\x94\xf4\x58\x78\x69\xc9\xa7\x09\x97\x70\x59\x57\xbe\x26\x58\x7a\xd7\x44\x09\x81\xad\xbc\x98\x41\xdf\x64\x60\x4c\x91\xbb\xc9\xe3\x40\xea\xa8\xf1\x1c\x21\x01\x26\x63\x7a\xdf\x6e\x6e\x36\x35\xee\x27\xcb\x6b\x70\xe2\xa0\x67\xe5\xb3\xcd\xc0\xb8\x44\xf9\x7d\xf3\xf8\xb0\x5c\xad\xaf\x6f\xff\xbf\x9a\x9d\x52\x75\xe5\xc5\x59\x62\xb2\x4e\xa2\x17\x98\xd4\x49\x7f\xba\x28\x66\xeb\x6d\xcf\xa0\xd6\x26\xf2\x1f\x9b\x28\x5e\x0a\xa0\xaa\xb0\x4e\xb9\x4c\xf4\x88\x9e\x69\xc7\x5a\x00\x07\xd6\xe8\x24\xd4\x28\x0f\xff\x90\x1f\x7b\xfa\xb7\x5c\x14\x00\x4d\xd6\x8b\xd6\x48\x7f\x04\x02\x0d\x5c\xe7\x9d\x70\x77\xbd\x5e\xe1\xbf\xd5\xc3\x6a\xd6\x21\xef\x9f\xb6\x48\xe3\x69\x51\x64\xa7\x1c\xf2\x31\xf2\x7b\xd7\x3a\xa5\x1e\xe6\xa0\xc8\x43\x8d\x1f\x33\x22\x9b\x00\x9d\xf3\xc6\x5a\xcf\xf1\x16\xe7\x3b\x6a\x53\x80\x58\xbf\x89\x80\x81\xf4\x67\xfe\x5a\x14\xac\x86\xe9\xf4\xa6\x3e\xe5\x1f\xe7\xe3\x33\xf7\x1d\xd1\xa9\x0c\x35\xca\x86\xf4\xea\x48\xbd\xc8\xdc\xee\x27\xc8\x97\xde\xa4\x6d\xef\x0e\xfc\xd1\x15\xf0\xd4\xb0\x4f\x79\xca\x4e\xa4\x7c\xfa\x6a\x9d\xa7\x45\x71\x2a\x7e\x07\x00\x00\xff\xff\x9f\xa5\x47\x2f\x45\x03\x00\x00")

func DefaultConfigJsonnetBytes() ([]byte, error) {
	return bindataRead(
		_DefaultConfigJsonnet,
		"../../../default-config.jsonnet",
	)
}

func DefaultConfigJsonnet() (*asset, error) {
	bytes, err := DefaultConfigJsonnetBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../default-config.jsonnet", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../gmailctl.libsonnet":     GmailctlLibsonnet,
	"../../../default-config.jsonnet": DefaultConfigJsonnet,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"..": &bintree{nil, map[string]*bintree{
				"default-config.jsonnet": &bintree{DefaultConfigJsonnet, map[string]*bintree{}},
				"gmailctl.libsonnet":     &bintree{GmailctlLibsonnet, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

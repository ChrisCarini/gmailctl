// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../gmailctl.libsonnet
// ../../../default-config.jsonnet
package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _GmailctlLibsonnet = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x94\x4f\x6f\xe3\x36\x10\xc5\xef\xfa\x14\x0f\x7b\x49\x8c\x55\xad\xed\xd5\x41\x0a\xb4\xdb\xf6\xd8\x5e\x72\x33\x7c\x60\xa8\x91\x35\x00\x45\x1a\xc3\x51\xbc\x42\x90\xef\x5e\xf0\x8f\x64\x6f\x80\x5e\x0c\x6a\xfe\xbc\x37\xfc\x91\x74\xd7\xe1\x3c\x19\x76\x56\x1d\xa2\x1a\xdf\x1b\xe9\xe1\xf8\x55\x8c\x2c\x4d\xd7\x35\x5d\x87\x97\x91\x23\x6c\xf0\x6a\xd8\x47\xcc\xca\x8e\x95\x29\x42\x47\xa3\x88\x3c\x5d\x1c\x0f\x0b\x6c\x98\xa6\xe0\x31\xb0\x53\x12\x84\x0b\x89\x51\x0e\x3e\xee\x9b\xa4\x61\x47\xc3\xfe\xef\x9c\x8b\xe0\x08\x83\x61\xf6\x36\x15\x64\x99\x16\x67\x7e\x23\x0f\x03\xc7\x51\x11\x06\xc8\xec\x28\xb6\xa9\x55\x48\x67\xf1\xa9\xc5\xd3\xb5\xe4\xaf\x23\x09\x41\x47\x2a\x65\x30\x42\xc5\x81\x7a\x68\x38\x8f\xa4\x24\xb9\xf7\x3a\xb2\x1d\x31\x91\xf1\x75\x5c\x1d\x69\x81\x35\x1e\xaf\x04\xf6\x4a\x72\x11\x52\xea\x61\x92\x7e\x96\x48\x6d\x61\xc0\x17\x1e\x40\x2e\xae\xbf\x5f\xf6\x85\x04\x41\x28\xce\x4e\xd3\x1e\x5e\x4d\x64\x6b\x9c\x5b\x3e\x8f\x5d\xe7\x23\x63\xc7\xca\x23\x35\x73\xc4\x14\x7a\x1e\x98\x7a\xbc\x2e\x30\x7d\xcf\xfe\x0c\xe3\xf1\xfb\x3f\x7f\xe2\xca\x3a\xe6\x0d\x79\x3a\x67\x6e\x49\xcc\x38\x97\x62\xa9\xf9\x22\xf4\xc6\x61\x8e\x55\x2f\xee\x1b\x17\xac\x71\x3f\x71\x7d\x1c\xe2\x0e\xcf\x0d\xd0\x75\xf5\x94\x96\xb2\xe9\x95\x6d\x1a\x0e\xac\x1b\x51\xd6\x58\xfc\xa8\xaf\xba\xfb\x06\x28\xc2\x25\xfe\x28\x3b\x3c\xe3\xdd\x07\x3d\x40\xf6\xa5\xe6\xe3\xa9\x58\x08\xd9\x59\x22\xbf\x51\x35\x09\xe9\x4a\x48\x98\xcf\x63\x1e\x9c\x1c\x4d\xe4\x35\xe6\x8d\x88\x6c\xc2\x66\xfe\xf1\x68\x44\x5a\x70\xbb\x9a\xb7\x90\xd9\x7b\xf6\xe7\x32\x3e\xc0\x03\x18\xbf\x3d\x23\x6a\xbf\x77\xe4\xcf\x3a\xa6\x96\x5d\x82\xe1\x73\x01\xd6\x8e\xfc\x45\x2e\x52\x0d\x77\x5d\xa5\x78\xad\xbb\x8d\x2b\xe1\x30\x1c\x6e\x35\xbf\xfc\x1f\xeb\x1b\xe8\x7c\x92\x9f\x3b\xec\x2c\x42\x5e\x73\xb2\xe6\x56\x5c\x57\x49\xa4\x6a\x10\x95\xe7\xe1\x2e\x02\x18\xdf\x1f\x36\xe0\x5f\x71\x34\x22\x47\x3e\x55\xac\xa7\xad\xf0\xa3\xdd\x96\x26\x3f\x91\x78\x40\x2d\xad\xdf\x6b\x41\x3e\x8a\x5c\xb7\x41\xc5\x57\xfc\xda\xde\x9b\xd4\x83\x2c\x02\xbb\xd3\xc6\xba\xe4\xae\x72\xda\x41\x0d\xbb\xa8\xc2\x56\x9f\x9a\x26\xd3\xbf\x03\x9f\x2f\xd5\x33\xbe\x65\xf8\x38\x9e\x56\xda\xc9\x72\x88\x6d\x72\x5b\x3d\x86\x78\xfc\x96\x2d\x8e\x79\x75\xda\x3d\xe5\xb7\xdf\xb3\x90\x55\xb7\xbc\x04\x4c\x46\xed\x48\x11\xc1\xbb\x05\x94\xfe\x77\xee\xdf\x32\x59\xbe\x70\xc2\xcb\x11\xec\x73\xec\xe1\xe5\xdf\x87\xa4\x31\x30\xb9\xbe\x85\x0f\x5a\xc2\xdf\xbf\x3f\x20\x08\x1e\xfe\xc8\x0b\x4f\xdb\x83\xb8\x99\x3d\x6e\x7a\xbb\x7a\x32\x99\xff\x31\x23\x7b\xd7\x70\xb8\x19\x56\xe2\xe5\x9e\xbf\x5b\x7b\x9f\xca\xb9\x53\xf3\x51\xf6\xf2\xd7\x8f\x4b\x90\xfc\x5e\xea\xdf\x57\x6c\x92\xf2\xfd\x33\x3c\xfc\xf4\x95\xba\x6f\x33\x1d\xee\xd6\x6d\xf3\xd1\xfc\x17\x00\x00\xff\xff\x36\x10\xbe\x91\x7e\x05\x00\x00")

func GmailctlLibsonnetBytes() ([]byte, error) {
	return bindataRead(
		_GmailctlLibsonnet,
		"../../../gmailctl.libsonnet",
	)
}

func GmailctlLibsonnet() (*asset, error) {
	bytes, err := GmailctlLibsonnetBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../gmailctl.libsonnet", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DefaultConfigJsonnet = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x41\x6b\xdb\x4e\x10\xc5\xef\xfa\x14\xef\xcf\xff\xa0\x4b\xb0\x68\x8f\x0a\x81\x04\x62\x68\xa0\x8e\x43\xea\x1c\x4a\xc9\x61\x24\x8f\xac\xa5\xab\x1d\x31\x3b\x72\x63\x82\xbf\x7b\x59\xad\x93\x34\x21\xa7\xf5\xec\x3e\xff\xde\xbc\xa7\xaa\xc2\xed\x7a\xb3\xac\xb1\xe9\x5d\x84\x8b\x20\x44\x37\x8c\x9e\xc1\x4f\x94\xce\x45\x51\x55\xb8\xf3\x4c\x91\xa1\xdc\xb1\xc2\x04\xbd\xd9\x18\xeb\xaa\xda\x39\xeb\xa7\x66\xd1\xca\x50\x0d\x8d\x5a\xb5\x1b\xc8\xf9\xd6\xfc\xff\xad\x84\xce\xed\x26\x25\x73\x12\xd0\x89\x62\x2b\x6d\x04\x35\x32\x59\x02\x5a\xcf\xc8\x9a\xf4\x38\x90\x2d\x70\x2d\xa1\xb4\x34\xed\xd8\x92\x47\xdb\x53\xd8\xf1\x3f\xca\x17\x5a\xc3\x9d\x28\x27\x09\x8d\xa3\x3f\xc0\x65\xa2\xe0\x20\x93\x42\xfe\x04\xb8\xd0\xc8\xd3\x7f\x45\xba\xbe\x19\x46\x51\x9b\x29\xd1\x28\x6c\x49\xb7\xf0\xae\x51\xd2\x43\xe1\xa5\x25\x9f\x26\x5c\xc0\x65\x5d\xf9\x92\x60\xe1\x5d\x13\x25\x04\xb6\xf2\x7c\x06\xfd\x90\x81\x31\x45\xee\x26\x8f\x3d\xa9\xa3\xc6\x73\x84\x04\x98\x8c\xe9\x7d\xb3\xbe\x5e\xd7\xb8\x9b\x2c\xaf\xc1\x89\x83\x9e\x95\x4f\x36\x03\xe3\x02\xe5\xcf\xf5\xc3\xfd\x62\xb9\xba\xba\xf9\x7e\x39\x3b\xa5\xea\xca\xf3\x93\xc4\x64\x95\x44\xcf\x26\x35\x06\x3e\x9e\x17\xb3\xf1\xa6\x67\x50\x6b\x13\xf9\xf7\x3d\x14\xcf\x05\x50\x55\x58\xa5\x54\x26\x7a\x40\xcf\xb4\x65\x2d\x80\x3d\x6b\x74\x12\x6a\x94\xfb\x2f\xe4\xc7\x9e\xbe\x96\x67\x05\x40\x93\xf5\xa2\x35\xd2\x1f\x81\x40\x03\xd7\x79\x23\xdc\x5e\xad\x96\xf8\xb6\xbc\x5f\xce\x3a\xe4\xed\xd3\x12\x69\x3c\x9e\x15\xd9\x29\x47\x7c\x88\xfc\xd6\xb4\x4e\xa9\x85\x39\x26\xf2\x50\xe3\xd7\x8c\xc8\x26\x40\xe7\xbc\xb1\xd6\x73\xb8\xb3\xd3\x1d\xb5\x29\x40\xac\x5f\x45\xc0\x40\xfa\x3b\x7f\x2b\x0a\x56\xc3\x74\x7a\x55\x1f\xf3\x8f\xd3\xf1\x91\xfb\x86\xe8\x54\x86\x1a\x65\x43\x7a\x79\xa0\x5e\x64\xee\xf6\x03\xe4\x53\x6f\xd2\xb6\x77\x7b\x7e\xef\x0a\x78\x6a\xd8\xa7\x3c\x65\x27\x52\x3e\x7e\xb6\xce\x63\x71\x2c\xfe\x06\x00\x00\xff\xff\x4d\x13\xcd\x30\x42\x03\x00\x00")

func DefaultConfigJsonnetBytes() ([]byte, error) {
	return bindataRead(
		_DefaultConfigJsonnet,
		"../../../default-config.jsonnet",
	)
}

func DefaultConfigJsonnet() (*asset, error) {
	bytes, err := DefaultConfigJsonnetBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../default-config.jsonnet", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../gmailctl.libsonnet": GmailctlLibsonnet,
	"../../../default-config.jsonnet": DefaultConfigJsonnet,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"..": &bintree{nil, map[string]*bintree{
				"default-config.jsonnet": &bintree{DefaultConfigJsonnet, map[string]*bintree{}},
				"gmailctl.libsonnet": &bintree{GmailctlLibsonnet, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


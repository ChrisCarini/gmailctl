// Code generated for package cmd by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../gmailctl.libsonnet
// ../../../default-config.jsonnet
package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _GmailctlLibsonnet = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\x3c\xec\xc5\x12\xa2\xda\xbb\x57\x07\x29\xb0\xdd\xa2\xe8\xa1\xd8\xf6\x10\xa0\x07\x41\x07\x5a\x1a\x59\x53\xd0\xa4\x4b\x8e\xd6\x31\x82\xfc\xf7\x82\x1f\x92\x95\x6c\xf6\xd2\x8b\x21\x73\x66\xde\x23\xdf\x9b\x21\x77\x3b\x1c\x4f\x8a\x75\x27\x1a\x5e\x94\xe9\x95\xeb\xa1\xf9\xe0\x94\xbb\x16\xbb\x5d\xb1\xdb\xe1\x71\x64\x3f\x2f\xa1\xb3\x46\x14\x1b\x8f\x49\x58\xb3\x30\x79\x0c\xd6\xa1\xb3\xa7\x93\x35\x18\x58\x0b\x39\xd8\x33\x39\x25\x6c\x8d\xdf\x16\xc5\x73\x01\xec\x76\xe8\x46\xc5\xe6\xb7\x18\xf7\x60\x0f\x85\x61\x32\x5d\x48\x82\x8c\x4a\x6a\x1c\xf9\x1b\x19\x28\x68\xf6\x02\x3b\xc0\x4d\x9a\x7c\x9d\x8a\x1d\xc9\xe4\x4c\x28\x32\x74\x49\x19\x97\x91\x1c\x41\x46\x4a\x89\x50\x8e\x12\x07\xf5\x10\x7b\x1c\x49\xc8\xe5\xea\xcb\xc8\xdd\x88\x13\x29\xe3\x23\x57\xa8\xba\xa2\x53\x06\x07\x02\x1b\x21\x77\x76\x24\xd4\x43\x05\x86\x08\x92\x0a\xed\x80\x0f\x3c\x80\xb4\x9f\x7f\x3f\x6c\x53\xe4\x31\xf0\x92\x9f\xb4\x84\xb3\x1c\x94\xe7\x4e\x69\x7d\x7d\xbb\xfd\xbc\x4b\x52\xdd\x98\xb5\x49\xe5\xec\x71\xb2\x3d\x0f\x4c\x3d\x0e\x57\xa8\xbe\x67\x73\x84\x32\xf8\xfc\xf5\x57\x5c\x58\xc6\x78\x30\x43\xc7\xa8\x62\x80\x53\x5a\x87\xb5\x54\x7e\x76\xf4\x8d\xed\xe4\x33\xa6\x0f\x9b\x5a\xeb\x5b\x0e\xbe\xda\xef\x0b\x20\x66\x27\xa7\xae\xe9\xe8\xb3\xca\x61\x7b\x60\x59\x94\x65\xf1\x89\x8f\xfa\x8c\xba\x8d\xf5\xda\x76\x4a\xe7\x48\xe9\x2a\x3c\xe0\x19\xc6\xca\x1e\x6e\x9b\xcd\x7e\xb9\x9f\x89\x1c\x75\x93\xf3\xfc\x8d\x32\x95\x25\x0f\x71\x76\x3a\x8e\x71\xfb\xa4\xe9\x44\x46\x7c\x3c\x8e\x73\x2b\x78\x35\x3d\x95\xca\xb9\x1a\x5c\xcf\x9b\xa8\xe1\x26\x63\xd8\x1c\x2b\x3c\xc4\x4c\x80\x07\x30\x7e\x7e\x80\x97\x7e\xab\xc9\x1c\x65\x0c\x45\x55\x90\xc5\xe4\x14\xcc\x55\xf9\x3f\x69\x4f\x4b\x68\xb7\xcb\xaa\x5e\xf2\xe9\xfd\xac\xb8\x1d\xf6\xeb\xac\x9f\x7e\xa4\xfe\x4d\xf8\xe8\xee\xf7\x35\xdd\xe4\x1c\x19\x89\xe1\x25\x3a\x4b\x78\x71\x41\xbd\x65\x19\x59\xe7\xfd\xab\x35\x40\x99\x7e\xbf\x58\x71\x87\x46\x39\xd7\x70\x9b\xd5\x6e\xeb\x55\xee\xcb\xfa\x8f\x8a\xb3\xe4\xf7\xc8\xf9\xf9\xff\x2d\x25\xfb\x14\x73\x17\xbd\x71\x87\x4f\xf5\x9a\x2d\x3b\x9d\x40\xaa\x76\xb1\x21\xc5\x2e\xae\xad\x20\x8a\xb5\x17\xc7\x9d\xdc\x17\x45\x36\x66\xe5\xc9\xe0\x2b\x3c\x3c\xe0\x63\xf4\x05\x4d\x5b\xcc\x46\x44\xda\xc1\xd7\x81\x71\xe6\x19\x7c\xf3\x31\xd2\x34\xf1\xab\xad\xea\x22\xb5\x78\xcf\x8e\x3a\xd1\xd7\x47\x8b\x93\x92\x6e\x24\x0f\x6b\xf4\x15\x14\x2e\xab\xf5\xf0\x53\xc7\x67\x0e\x9a\xb3\x07\x9b\xb8\xb6\x79\xfc\x73\x93\x50\x06\x26\xdd\xd7\xa1\x61\x53\xe0\xcb\x97\x0d\xac\xc3\xe6\x97\xf8\x61\x28\x4e\xce\x8d\xaa\x5c\xd0\xaa\xfd\x6c\x4b\xb4\xa3\xc9\xd2\x3d\x43\xec\x7e\xc5\xb9\x38\x90\x87\xe2\x19\x5d\xf7\x2a\xfe\x4e\xc6\xe1\x07\x29\xd1\xda\x97\x78\xfe\xd4\x31\xf4\x24\x64\xfa\xbf\x59\xc6\xbf\x54\xe8\x2a\x5f\x6a\x75\x20\xed\xe7\x89\x58\x67\x95\xe7\xdb\x9c\xa4\xf5\xce\x9e\xce\x1e\x69\x5a\xfc\x59\xb3\x94\xe7\x1a\x9b\xdd\xa6\xba\x7f\x95\x16\x3c\x09\x5d\x5b\xc3\xd1\xe9\x86\xf1\xd6\xd4\x14\x9c\x5d\x5d\xb5\x5d\x13\x8a\xdb\x65\xe1\xd5\xc0\x61\x41\xc7\x5d\xa0\xc6\x5d\x20\x69\x3e\xb6\x91\xac\xf9\xb4\x6f\xab\xd0\x56\x11\xe1\xbe\x78\x8f\x36\x1e\x22\x12\x7f\xca\xed\x74\x6e\x57\xa3\x9d\xf0\x43\x4e\x04\x4d\x5f\x01\x36\xa1\x05\xa0\x41\x2b\x11\x32\x9f\x9d\x53\x57\x5f\x36\x59\x2d\x5d\xc5\x57\x4b\x87\x8e\x49\xa2\xde\x3a\x2f\xcc\xee\x1f\x71\xed\xf6\xec\xe4\xf1\x4f\xa9\x30\x44\x7d\xba\xb8\xe7\xe7\x67\xbb\x98\x76\xab\x2e\xc3\xe7\xac\x68\x3e\x96\x3d\xfc\x43\x9d\xfc\xae\x52\x70\x99\x51\x6c\x12\xf2\xe6\xd5\x65\xf6\xbd\xff\xeb\xa2\x6d\x6e\x86\xe2\x8d\xec\x4d\xfb\x7f\x0f\x92\x9e\x86\x78\xb3\xa5\x57\x2e\xc1\x7c\xb5\x92\x2f\x74\x63\x61\x65\x24\x87\xb3\x0b\x2f\x7c\x78\xfc\xeb\xbc\x22\xa3\x4a\xb3\x67\xd4\x89\xea\xf8\x18\x2b\x11\xd5\x8d\xd4\x27\x14\xb1\x6b\xe2\x92\xb7\xb4\x4d\x37\xa6\xd5\xd6\x55\x81\x2f\x12\xaf\xa4\x5b\x9e\xb0\x24\x6c\xae\x4c\x0d\x3d\x19\xfe\xb7\x8c\x9d\x6d\x9d\x94\xef\xf8\xbc\xb2\xe1\x29\x79\xfd\x14\xbc\x8e\xb8\x6d\x55\xe5\x06\x69\x9e\xe3\x7e\xf7\x78\xc2\xcb\x2d\x29\x37\x44\x5d\xbc\x14\xff\x05\x00\x00\xff\xff\x5e\x41\xc2\xaf\x1e\x09\x00\x00")

func GmailctlLibsonnetBytes() ([]byte, error) {
	return bindataRead(
		_GmailctlLibsonnet,
		"../../../gmailctl.libsonnet",
	)
}

func GmailctlLibsonnet() (*asset, error) {
	bytes, err := GmailctlLibsonnetBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../gmailctl.libsonnet", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DefaultConfigJsonnet = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x41\x6b\xe3\x48\x10\x85\xef\xfa\x15\x6f\xd9\x83\x2e\xc6\x62\xd9\x9b\x42\x20\x81\x18\x36\xb0\x8e\x43\xc6\x39\x0c\x43\x0e\x25\xb9\x64\x35\xd3\xea\x12\xd5\x25\x4f\x4c\xf0\x7f\x1f\x5a\xed\x24\x93\x90\x53\xbb\xba\x9f\xbf\x57\xef\xa9\xaa\x70\xb7\xd9\xae\x6a\x6c\x7b\x17\xe1\x22\x08\xd1\x0d\xa3\x67\xf0\x33\xa5\x73\x59\x54\x15\xee\x3d\x53\x64\x28\x77\xac\x30\x41\x6f\x36\xc6\xba\xaa\xf6\xce\xfa\xa9\x59\xb6\x32\x54\x43\xa3\x56\xed\x07\x72\xbe\x35\xff\x77\x2b\xa1\x73\xfb\x49\xc9\x9c\x04\x74\xa2\xd8\x49\x1b\x41\x8d\x4c\x96\x80\xd6\x33\xb2\x26\x3d\x0e\x64\x4b\xdc\x48\x28\x2d\x4d\x7b\xb6\xe4\xd1\xf6\x14\xf6\xfc\x87\xf2\x95\xd6\x70\x27\xca\x49\x42\xe3\xe8\x8f\x70\x99\x28\x38\xca\xa4\x90\x5f\x01\x2e\x34\xf2\xfc\x57\x91\xae\x6f\x87\x51\xd4\x66\x4a\x34\x0a\x3b\xd2\x1d\xbc\x6b\x94\xf4\x58\x78\x69\xc9\xa7\x09\x97\x70\x59\x57\xbe\x26\x58\x7a\xd7\x44\x09\x81\xad\xbc\x98\x41\xdf\x64\x60\x4c\x91\xbb\xc9\xe3\x40\xea\xa8\xf1\x1c\x21\x01\x26\x63\x7a\xdf\x6e\x6e\x36\x35\xee\x27\xcb\x6b\x70\xe2\xa0\x67\xe5\xb3\xcd\xc0\xb8\x44\xf9\x7d\xf3\xf8\xb0\x5c\xad\xaf\x6f\xff\xbf\x9a\x9d\x52\x75\xe5\xc5\x59\x62\xb2\x4e\xa2\x17\x98\xd4\x49\x7f\xba\x28\x66\xeb\x6d\xcf\xa0\xd6\x26\xf2\x1f\x9b\x28\x5e\x0a\xa0\xaa\xb0\x4e\xb9\x4c\xf4\x88\x9e\x69\xc7\x5a\x00\x07\xd6\xe8\x24\xd4\x28\x0f\xff\x90\x1f\x7b\xfa\xb7\x5c\x14\x00\x4d\xd6\x8b\xd6\x48\x7f\x04\x02\x0d\x5c\xe7\x9d\x70\x77\xbd\x5e\xe1\xbf\xd5\xc3\x6a\xd6\x21\xef\x9f\xb6\x48\xe3\x69\x51\x64\xa7\x1c\xf2\x31\xf2\x7b\xd7\x3a\xa5\x1e\xe6\xa0\xc8\x43\x8d\x1f\x33\x22\x9b\x00\x9d\xf3\xc6\x5a\xcf\xf1\x16\xe7\x3b\x6a\x53\x80\x58\xbf\x89\x80\x81\xf4\x67\xfe\x5a\x14\xac\x86\xe9\xf4\xa6\x3e\xe5\x1f\xe7\xe3\x33\xf7\x1d\xd1\xa9\x0c\x35\xca\x86\xf4\xea\x48\xbd\xc8\xdc\xee\x27\xc8\x97\xde\xa4\x6d\xef\x0e\xfc\xd1\x15\xf0\xd4\xb0\x4f\x79\xca\x4e\xa4\x7c\xfa\x6a\x9d\xa7\x45\x71\x2a\x7e\x07\x00\x00\xff\xff\x9f\xa5\x47\x2f\x45\x03\x00\x00")

func DefaultConfigJsonnetBytes() ([]byte, error) {
	return bindataRead(
		_DefaultConfigJsonnet,
		"../../../default-config.jsonnet",
	)
}

func DefaultConfigJsonnet() (*asset, error) {
	bytes, err := DefaultConfigJsonnetBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../default-config.jsonnet", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../gmailctl.libsonnet":     GmailctlLibsonnet,
	"../../../default-config.jsonnet": DefaultConfigJsonnet,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"..": &bintree{nil, map[string]*bintree{
				"default-config.jsonnet": &bintree{DefaultConfigJsonnet, map[string]*bintree{}},
				"gmailctl.libsonnet":     &bintree{GmailctlLibsonnet, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
